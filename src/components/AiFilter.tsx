'use client'

import React from 'react'
import { Sparkles, Eraser } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { toast } from 'sonner'

interface FilterChip {
  id: string
  label: string
  type: 'manual' | 'ai'
  query: string
}

interface AiFilterProps {
  query: string
  setQuery: (query: string) => void
  isProcessing: boolean
  setIsProcessing: (processing: boolean) => void
  data: any[]
  entityType: 'client' | 'worker' | 'task'
  activeFilters: FilterChip[]
  setActiveFilters: React.Dispatch<React.SetStateAction<FilterChip[]>>
  setFilteredResults: React.Dispatch<React.SetStateAction<{
    client: any[]
    worker: any[]
    task: any[]
  }>>
  setShowResults: (show: boolean) => void
  setLastError: (error: string | null) => void
  onFilteredData: (data: any[]) => void
  onClearCurrentFilter: () => void
  applyQuickFilter?: (query: string) => void
}

export default function AiFilter({
  query,
  setQuery,
  isProcessing,
  setIsProcessing,
  data,
  entityType,
  activeFilters,
  setActiveFilters,
  setFilteredResults,
  setShowResults,
  setLastError,
  onFilteredData,
  onClearCurrentFilter,
  applyQuickFilter
}: AiFilterProps) {

  const applyAiFilter = async (filterQuery: string = query) => {
    if (!filterQuery.trim()) {
      toast.error('Please enter a filter query')
      return
    }

    if (!entityType) {
      toast.error('Entity type is required')
      return
    }

    setIsProcessing(true)
    setLastError(null)
    toast.loading('Processing filter...', { id: 'filter' })

    try {
      let filteredData = data

      // AI-powered filtering
      const response = await fetch('/api/filter-expression', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: filterQuery,
          data: data.slice(0, 5), // Send sample for context
          entityType,
        }),
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`API request failed (${response.status}): ${errorText}`)
      }

      const result = await response.json()

      if (result.error) {
        const errorMsg = result.details || result.error
        setLastError(`AI Filter Error: ${errorMsg}`)
        throw new Error(errorMsg)
      }

      if (!result.expression) {
        const errorMsg = 'No filter expression generated by AI'
        setLastError(errorMsg)
        throw new Error(errorMsg)
      }

      // Test the expression on a small sample first
      try {
        const testSample = data.slice(0, 3)
        testSample.forEach((row) => {
          const filterFunction = new Function('row', `
            try {
              return ${result.expression};
            } catch (e) {
              throw new Error('Expression evaluation failed: ' + e.message);
            }
          `)
          filterFunction(row) // This will throw if the expression is invalid
        })
      } catch (testError) {
        const errorMsg = `Invalid filter expression: ${testError instanceof Error ? testError.message : 'Unknown error'}`
        setLastError(errorMsg)
        throw new Error(errorMsg)
      }

      // Apply the AI-generated filter with safer evaluation
      filteredData = data.filter((row) => {
        try {
          // Clean and prepare the expression
          let expression = result.expression.trim()

          // Handle common expression formats
          if (!expression.startsWith('row.')) {
            // If expression doesn't start with row., try to fix common patterns
            expression = expression.replace(/\b(\w+)\b(?=\s*[><=!])/g, 'row.$1')
            expression = expression.replace(/\b(\w+)\.includes\(/g, 'row.$1.includes(')
            expression = expression.replace(/\b(\w+)\.toLowerCase\(/g, 'row.$1.toLowerCase(')
          }

          // Replace common field mappings for better compatibility
          expression = expression.replace(/\bitem\./g, 'row.')
          expression = expression.replace(/\bdata\./g, 'row.')

          // Use Function constructor for safer evaluation than eval
          const filterFunction = new Function('row', `
            try {
              return ${expression};
            } catch (e) {
              console.warn('Filter expression error:', e);
              return false;
            }
          `)
          return filterFunction(row)
        } catch (evalError) {
          console.warn('Filter expression evaluation error:', evalError)
          return false
        }
      })

      // Add filter chip
      const newFilter: FilterChip = {
        id: Date.now().toString(),
        label: filterQuery,
        type: 'ai',
        query: filterQuery,
      }

      setActiveFilters(prev => [...prev, newFilter])

      // Update filtered results by entity type
      setFilteredResults(prev => ({
        ...prev,
        [entityType]: filteredData
      }))

      onFilteredData(filteredData)
      if (filterQuery === query) {
        setQuery('')
      }
      setShowResults(true)

      toast.success(
        `Filter applied! Showing ${filteredData.length} of ${data.length} records.`,
        { id: 'filter' }
      )
    } catch (error) {
      console.error('Filter error:', error)
      const errorMessage = error instanceof Error ? error.message : 'Unknown error'

      // Extract more specific error information
      let userFriendlyMessage = errorMessage
      let suggestions = 'Please try rephrasing your query.'

      if (errorMessage.includes('API request failed')) {
        userFriendlyMessage = 'Unable to connect to the AI filtering service'
        suggestions = 'Check your internet connection or try using manual filtering instead.'
      } else if (errorMessage.includes('Invalid filter expression')) {
        userFriendlyMessage = 'The AI generated an invalid filter expression'
        suggestions = 'Try using simpler language or switch to manual filtering.'
      } else if (errorMessage.includes('Expression evaluation failed')) {
        userFriendlyMessage = 'The filter expression could not be applied to your data'
        suggestions = 'Ensure your field names match the data structure.'
      } else if (errorMessage.includes('No filter expression generated')) {
        userFriendlyMessage = 'The AI could not understand your filter request'
        suggestions = 'Try examples like: "priority > 3", "name contains Corp", "skills include coding"'
      }

      // Don't clear the UI on error - keep everything visible
      toast.error(
        `Filter Error: ${userFriendlyMessage}`,
        {
          id: 'filter',
          duration: 8000,
          description: suggestions,
          action: {
            label: 'Dismiss',
            onClick: () => toast.dismiss('filter')
          }
        }
      )

      // Set error state but don't reset filters or data
      setLastError(`${userFriendlyMessage}. ${suggestions}`)
    } finally {
      setIsProcessing(false)
    }
  }

  // Use applyQuickFilter if available, otherwise use applyAiFilter
  const handleQuickFilter = applyQuickFilter || applyAiFilter

  return (
    <div className="space-y-4 mt-4">
      {/* AI Filter Input */}
      <div className="flex gap-2">
        <div className="flex-1 relative">
          <Input
            placeholder="e.g., 'show high priority clients with active projects' or 'duration greater than 1'"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && !isProcessing && applyAiFilter()}
            className="pr-10 bg-white border-gray-300"
          />
          <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
            <Sparkles className="h-4 w-4 text-purple-500" />
          </div>
        </div>
        <Button
          onClick={() => applyAiFilter()}
          disabled={isProcessing || !query.trim()}
          className="bg-purple-600 hover:bg-purple-700 text-white px-6"
        >
          {isProcessing ? (
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
          ) : (
            'Apply'
          )}
        </Button>
        <Button
          onClick={onClearCurrentFilter}
          disabled={!query.trim()}
          variant="outline"
          className="border-gray-300 text-gray-600 hover:bg-gray-50"
        >
          <Eraser className="h-4 w-4" />
        </Button>
      </div>

      {/* AI Mode Info */}
      <div className="text-xs text-purple-700 bg-purple-50 p-3 rounded-lg border border-purple-200">
        <p className="font-medium">✨ AI Mode Examples:</p>
        <div className="mt-1 space-y-1">
          <p>• <code>"priority level is 5"</code></p>
          <p>• <code>"duration greater than 1"</code></p>
          <p>• <code>"skills include coding"</code></p>
          <p>• <code>"client name contains Corp"</code></p>
        </div>
      </div>
    </div>
  )
}
