'use client'

import React, { useState, useCallback } from 'react'
import { Sparkles, Send, Eraser, AlertTriangle } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent } from '@/components/ui/card'
import { motion } from 'framer-motion'
import { toast } from 'sonner'
import {
  FilterResult,
  FilterError,
  EntityType,
  validateQuery,
  createUserFriendlyError,
  testExpression,
  safeEvaluateExpression
} from '@/lib/filter-utils'

interface AiFilterProps {
  data: any[]
  entityType: EntityType
  onFilterResult: (result: FilterResult) => void
  disabled?: boolean
  placeholder?: string
}

interface FilterState {
  query: string
  isProcessing: boolean
  lastError: FilterError | null
}

export default function AiFilter({
  data,
  entityType,
  onFilterResult,
  disabled = false,
  placeholder = "e.g., 'show clients with active projects' or 'duration greater than 1'"
}: AiFilterProps) {
  const [state, setState] = useState<FilterState>({
    query: '',
    isProcessing: false,
    lastError: null
  })

  const updateState = useCallback((updates: Partial<FilterState>) => {
    setState(prev => ({ ...prev, ...updates }))
  }, [])

  const clearError = useCallback(() => {
    updateState({ lastError: null })
  }, [updateState])

  const clearQuery = useCallback(() => {
    updateState({ query: '' })
    toast.success('Filter cleared')
  }, [updateState])

  const applyAiFilter = useCallback(async (queryToApply?: string) => {
    const currentQuery = queryToApply || state.query

    // Validate input
    const validation = validateQuery(currentQuery)
    if (!validation.isValid) {
      const error: FilterError = {
        type: 'validation',
        message: validation.error || 'Invalid query',
        details: 'Please enter a valid filter query.'
      }
      updateState({ lastError: error })
      toast.error(error.message)
      return
    }

    if (!entityType) {
      const error: FilterError = {
        type: 'validation',
        message: 'Entity type is required',
        details: 'Please ensure an entity type is selected.'
      }
      updateState({ lastError: error })
      toast.error(error.message)
      return
    }

    updateState({ isProcessing: true, lastError: null })
    const toastId = 'ai-filter'
    toast.loading('AI is processing your filter...', { id: toastId })

    try {
      // Call AI API to generate filter expression
      const response = await fetch('/api/filter-expression', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: currentQuery,
          data: data.slice(0, 5), // Send sample for context
          entityType,
        }),
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`API request failed (${response.status}): ${errorText}`)
      }

      const result = await response.json()

      // Handle API errors
      if (result.error) {
        throw new Error(result.details || result.error)
      }

      if (!result.expression) {
        throw new Error('No filter expression generated by AI')
      }

      // Test expression before applying to full dataset
      const testResult = testExpression(result.expression, data)
      if (!testResult.isValid) {
        throw new Error(testResult.error || 'Invalid filter expression generated')
      }

      // Apply the AI-generated filter safely
      const filteredData = data.filter((row) => {
        try {
          return safeEvaluateExpression(result.expression, row)
        } catch (evalError) {
          console.warn('Filter expression evaluation error:', evalError)
          return false
        }
      })

      // Success - notify parent component
      onFilterResult({ data: filteredData, query: currentQuery })

      // Clear query on successful application
      updateState({ query: '' })

      toast.success(
        `AI filter applied! Showing ${filteredData.length} of ${data.length} records.`,
        { id: toastId }
      )

    } catch (error) {
      console.error('AI Filter error:', error)
      const userError = createUserFriendlyError(error)

      updateState({ lastError: userError })

      // Notify parent of error (but don't break the UI)
      onFilterResult({
        data: data, // Return original data on error
        error: userError
      })

      toast.error(userError.message, {
        id: toastId,
        duration: 8000,
        description: userError.details,
        action: {
          label: 'Dismiss',
          onClick: () => {
            toast.dismiss(toastId)
            clearError()
          }
        }
      })
    } finally {
      updateState({ isProcessing: false })
    }
  }, [state.query, entityType, data, onFilterResult, updateState, clearError])

  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !state.isProcessing && !disabled) {
      applyAiFilter()
    }
  }, [applyAiFilter, state.isProcessing, disabled])

  return (
    <Card className="w-full bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200">
      <CardContent className="p-4 space-y-4">
        {/* Error Display */}
        {state.lastError && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="bg-red-50 border border-red-200 rounded-lg p-3"
          >
            <div className="flex items-start gap-2">
              <AlertTriangle className="h-4 w-4 text-red-500 mt-0.5 flex-shrink-0" />
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-red-800">
                  ⚠️ Unable to apply this filter
                </p>
                <p className="text-xs text-red-600 mt-1">
                  {state.lastError.details || 'Please check your input and try again.'}
                </p>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={clearError}
                className="text-red-600 hover:bg-red-100 p-1 h-auto"
              >
                ×
              </Button>
            </div>
          </motion.div>
        )}

        {/* AI Filter Input */}
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-purple-700">
            <Sparkles className="h-4 w-4" />
            <span className="text-sm font-medium">AI-Powered Filter</span>
          </div>

          <div className="flex gap-2">
            <div className="flex-1 relative">
              <Input
                placeholder={placeholder}
                value={state.query}
                onChange={(e) => updateState({ query: e.target.value })}
                onKeyDown={handleKeyDown}
                disabled={disabled || state.isProcessing}
                className="bg-white border-purple-300 focus:border-purple-500 focus:ring-purple-500/20"
              />
            </div>

            <Button
              onClick={() => applyAiFilter()}
              disabled={state.isProcessing || !state.query.trim() || disabled}
              className="bg-purple-600 hover:bg-purple-700 text-white px-4"
            >
              {state.isProcessing ? (
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                >
                  <Sparkles className="h-4 w-4" />
                </motion.div>
              ) : (
                <Send className="h-4 w-4" />
              )}
            </Button>

            <Button
              onClick={clearQuery}
              disabled={!state.query.trim() || state.isProcessing}
              variant="outline"
              className="border-purple-300 text-purple-600 hover:bg-purple-50"
            >
              <Eraser className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {/* AI Mode Info */}
        <div className="text-xs text-purple-700 bg-white/60 p-3 rounded-lg border border-purple-200">
          <p className="font-medium">✨ AI Mode Examples:</p>
          <div className="mt-1 space-y-1">
            <p>• "Show clients with budget greater than 50000"</p>
            <p>• "Workers with coding skills and qualification level 5"</p>
            <p>• "Tasks in Analytics category with duration less than 2"</p>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

// Hook for easy integration
export function useAiFilter(data: any[], entityType: EntityType) {
  const [filteredData, setFilteredData] = useState<any[]>(data)
  const [error, setError] = useState<FilterError | null>(null)

  const handleFilterResult = useCallback((result: FilterResult) => {
    setFilteredData(result.data)
    setError(result.error || null)
  }, [])

  const reset = useCallback(() => {
    setFilteredData(data)
    setError(null)
  }, [data])

  return {
    filteredData,
    error,
    handleFilterResult,
    reset
  }
}
